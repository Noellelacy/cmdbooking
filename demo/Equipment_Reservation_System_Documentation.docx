# Equipment Reservation System Documentation

## Table of Contents
1. Introduction
2. System Architecture
3. User Interfaces
   - Faculty Interface
   - Student Interface
4. Data Models
5. Views and Business Logic
6. URL Routing
7. Authentication and Authorization
8. Analytics and Reporting
9. Cart and Checkout Process
10. Media Management
11. Migration History

## 1. Introduction

This document provides a comprehensive technical overview of the Equipment Reservation System developed using Django. The system allows faculty members to manage multimedia equipment inventory and students to reserve equipment for their academic needs. The platform streamlines the process of equipment management, reservation approval, and usage tracking.

### Key Features
- **Dual Interfaces**: Separate interfaces for faculty and students
- **Equipment Management**: Add, edit, delete, and categorize equipment items
- **Reservation System**: Students can browse, reserve, and return equipment
- **Shopping Cart**: Multi-item reservation with purpose and duration
- **Analytics Dashboard**: Usage statistics and equipment utilization reporting
- **Equipment Images**: Visual representation of available equipment
- **Approval Workflow**: Faculty approval for student reservation requests

### Technology Stack
- **Backend**: Django 5.1.6
- **Frontend**: Bootstrap 5, JavaScript, HTML5, CSS3
- **Database**: SQLite (development)
- **Image Processing**: Pillow library
- **Package Management**: pip
- **Authentication**: Django's built-in authentication system

## 2. System Architecture

The system follows a Model-View-Template (MVT) architecture inherent to Django. The application is organized into the following components:

### Project Structure
- **djreservation/**: Main project directory
  - **demo/**: Project settings and URL configuration
  - **demoapp/**: Main application directory
    - **migrations/**: Database migration files
    - **static/**: Static assets (CSS, JS, images)
    - **templates/**: HTML templates organized by user type
    - **templatetags/**: Custom template filters and tags
    - **models.py**: Data model definitions
    - **views.py**: View functions and classes
    - **forms.py**: Form definitions
    - **admin.py**: Admin interface configuration
    - **urls.py**: Application URL routing
  - **media/**: User-uploaded files (equipment images)
  - **manage.py**: Django management script

### Request Flow
1. Client sends HTTP request
2. URL dispatcher routes request to appropriate view
3. View processes data through models and forms
4. View renders response using templates
5. Response sent back to client

## 3. User Interfaces

### Faculty Interface

#### Dashboard (/faculty/dashboard/)
- Overview of system status
- Recent equipment reservations
- Equipment availability statistics
- Quick access to management functions

#### Equipment Management
- **List View** (/faculty/equipment/): Displays all equipment with filtering options
- **Add Equipment** (/faculty/equipment/add/): Form to create new equipment entries
- **Edit Equipment** (/faculty/equipment/<id>/edit/): Form to modify existing equipment
- **Delete Equipment** (/faculty/equipment/<id>/delete/): Remove equipment from inventory

#### Category Management
- **List View** (/faculty/categories/): Displays all equipment categories
- **Add Category** (/faculty/categories/add/): Create new categories
- **Edit Category** (/faculty/categories/<id>/edit/): Modify category details
- **Delete Category** (/faculty/categories/<id>/delete/): Remove categories

#### Reservation Management
- **List View** (/faculty/reservations/): All pending and active reservations
- **Approval Process** (/faculty/reservations/<id>/approve/): Accept student requests
- **Rejection Process** (/faculty/reservations/<id>/reject/): Decline student requests
- **Checkout Process** (/faculty/reservations/<id>/checkout/): Mark as checked out
- **Return Process** (/faculty/reservations/<id>/return/): Mark as returned

#### Analytics
- **Dashboard** (/faculty/analytics/): Utilization metrics and equipment trends
- **Equipment Detail** (/faculty/analytics/equipment/<id>/): Stats for specific equipment

#### Maintenance
- **Report Maintenance** (/faculty/maintenance/report/): Log maintenance issues

### Student Interface

#### Dashboard (/dashboard/)
- Overview of active and past reservations
- Quick links to equipment list and cart

#### Equipment Browsing
- **List View** (/equipment/): Catalog of available equipment with filtering
- **Search Functionality**: Find equipment by name, category, or type

#### Reservation Process
- **Cart** (/cart/): Temporary storage for selected equipment
- **Add to Cart** (/cart/add/<id>/): Add equipment items to reservation queue
- **Update Cart** (/cart/update/<id>/): Modify reservation details
- **Remove from Cart** (/cart/remove/<id>/): Remove items from cart
- **Checkout** (/cart/checkout/): Finalize reservation requests

#### Reservation Management
- **My Reservations** (/reservations/): View and manage current reservations
- **Return Equipment** (/equipment/return/<id>/): Mark equipment as returned

## 4. Data Models

### User Models
- **User**: Django's built-in user model for authentication
- **UserProfile**: Extension of User with additional fields
  - user_type: 'student' or 'faculty'
  - number: ID number for institutional identification

### Equipment Models
- **EquipmentCategory**: Classification system for equipment
  - name: Category name
  - description: Category details
  - created_by: Faculty who created the category
  - created_at: Timestamp

- **MultimediaEquipment**: Core equipment data model
  - name: Equipment name
  - equipment_type: Classification (Audio, Video, Other)
  - category: ForeignKey to EquipmentCategory
  - serial_number: Unique identifier
  - condition: Status (Excellent, Good, Fair, Needs Repair)
  - inventory_number: Additional tracking number
  - location: Storage location
  - description: Detailed description
  - is_available: Availability flag
  - max_reservation_hours: Reservation time limit
  - requires_training: Training requirement flag
  - notes: Additional information
  - image: Equipment photograph
  - added_by: Faculty who added the equipment
  - last_maintained: Most recent maintenance date
  - total_quantity: Total units available
  - available_quantity: Currently available units
  - min_alert_threshold: Low stock warning level

### Reservation Models
- **CartItem**: Temporary reservation before submission
  - user: Student making the reservation
  - equipment: Equipment being reserved
  - quantity: Number of units
  - start_time: Planned checkout time
  - end_time: Planned return time
  - purpose: Reason for reservation

- **EquipmentUsage**: Tracks actual equipment usage
  - equipment: Reserved equipment
  - user: Student user
  - checkout_time: When equipment was taken
  - expected_return_time: Planned return time
  - actual_return_time: Actual return time (if returned)
  - course_code: Related course
  - purpose: Reason for reservation
  - condition_notes: Equipment condition observations
  - status: Workflow state (pending, approved, rejected, checked_out, returned, overdue)
  - approved_by: Faculty who approved
  - approved_at: Approval timestamp
  - quantity: Number of units

### Maintenance Models
- **MaintenanceRecord**: Routine maintenance tracking
  - equipment: Maintained equipment
  - maintenance_type: Type of maintenance
  - description: Details
  - date: When maintenance occurred
  - duration_hours: Time spent
  - technician: Person who performed maintenance

- **RepairRecord**: Tracking for repairs
  - equipment: Repaired equipment
  - issue_type: Type of problem
  - description: Issue details
  - start_date: When repair began
  - end_date: When repair completed
  - cost: Repair expense
  - technician: Repair person

## 5. Views and Business Logic

### Authentication Views
- **login_view**: Student login process
- **faculty_login**: Faculty-specific login
- **logout_view**: General logout
- **faculty_logout_view**: Faculty-specific logout
- **signup**: New user registration

### Faculty Views
- **faculty_dashboard**: Overview dashboard for faculty
- **equipment_list_manage**: Equipment inventory management
- **equipment_create**: Add new equipment
- **equipment_edit**: Modify equipment details
- **equipment_delete**: Remove equipment
- **category_list**: View equipment categories
- **category_create**: Add new categories
- **category_edit**: Modify category details
- **category_delete**: Remove categories
- **manage_reservations**: Reservation management
- **approve_reservation**: Accept student requests
- **reject_reservation**: Decline student requests
- **mark_checked_out**: Record equipment checkout
- **mark_returned**: Record equipment return
- **report_maintenance**: Log maintenance issues
- **faculty_analytics**: View usage statistics
- **equipment_detail_analytics**: View equipment-specific stats

### Student Views
- **dashboard**: Student overview dashboard
- **StudentEquipmentListView**: Browse available equipment
- **my_reservations**: View current and past reservations
- **equipment_return**: Return borrowed equipment
- **add_to_cart**: Add equipment to reservation cart
- **view_cart**: View items in reservation cart
- **remove_from_cart**: Remove items from cart
- **update_cart_item**: Adjust reservation details
- **checkout_cart**: Submit reservation requests

### CSRF Protection
- **refresh_csrf**: Refresh CSRF token for forms

## 6. URL Routing

The system uses two URL configuration files:

### Main URLs (demo/urls.py)
- Root URL configuration for the entire project
- Direct import of views from demoapp
- No namespace used
- Media serving configuration for development

### App URLs (demoapp/urls.py)
- App-specific URL configuration
- Defines 'demoapp' namespace
- Alternative URL pattern definitions

## 7. Authentication and Authorization

### Authentication
- Django's built-in authentication system
- Custom login views for different user types
- Session-based authentication
- CSRF protection for form submissions

### Authorization
- Role-based access control (faculty vs. student)
- Django decorators for view protection:
  - @login_required: Ensures user is logged in
  - @user_passes_test: Checks if user is faculty
- UserProfile.is_faculty() method for role checking
- Class-based view mixins (LoginRequiredMixin)

## 8. Analytics and Reporting

### Faculty Analytics Dashboard
- **Time-based Analysis**: Usage patterns over time
- **Utilization Rates**: Equipment usage percentages
- **Popular Equipment**: Most frequently reserved items
- **Category Distribution**: Usage by equipment category
- **Charts and Visualizations**: Data presented visually

### Equipment-specific Analytics
- **Usage History**: Timeline of checkouts
- **Utilization Rate**: Percentage of time in use
- **User Distribution**: Who uses this equipment
- **Purpose Analysis**: Common use cases
- **Maintenance Records**: Upkeep history

## 9. Cart and Checkout Process

### Cart System
1. **Equipment Selection**: Students browse and select equipment
2. **Add to Cart**: Equipment added to temporary storage
3. **Quantity Selection**: Choose how many units to reserve
4. **Purpose Entry**: Document reason for reservation
5. **Time Selection**: Set checkout and return times

### Checkout Flow
1. **Review Items**: Verify selected equipment
2. **Submit Request**: Send to faculty for approval
3. **Confirmation**: Receive acknowledgment of request
4. **Status Tracking**: Monitor request through approval process

## 10. Media Management

### Image Upload System
- **Storage Configuration**: 
  - MEDIA_ROOT: Local directory for uploads
  - MEDIA_URL: URL path for media access
- **Upload Process**:
  - HTML form with enctype="multipart/form-data"
  - Form processing with request.FILES
  - Validation of file types and sizes
- **Image Display**:
  - Faculty: Image preview in edit form
  - Students: Images in equipment listings
  - Fallback for missing images

## 11. Migration History

The system has undergone several database migrations:
- 0001_initial: Initial database schema
- 0002_equipment_usage_updates: Updated usage tracking
- 0003_alter_equipmentusage_options_and_more: Model refinements
- 0004_merge_20250226_1600: Merged migration branches
- 0005_auto_20250226_1621: Automated model changes
- 0006_auto_20250226_2000: Additional model updates
- 0007_add_quantity_fields: Added quantity tracking
- 0008_equipmentusage_quantity: Added quantity to usage
- 0009_repair_record_and_maintenance_update: Maintenance tracking
- 0010_multimediaequipment_image: Added image support

## 12. Conclusion

The Equipment Reservation System provides a comprehensive solution for managing multimedia equipment in an educational setting. The separation of faculty and student interfaces ensures appropriate access control while streamlining workflows for both user types. The system's analytics capabilities offer valuable insights into equipment utilization, helping faculty make informed decisions about inventory management and resource allocation.

Future enhancements might include:
- Integration with institutional authentication systems
- Mobile application development
- Barcode/QR code scanning for checkout
- Automated email notifications
- Calendar integration
- Preventive maintenance scheduling
